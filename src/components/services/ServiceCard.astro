---
export interface DetailItem {
  title: string;
  text: string;
}

export interface Props {
  number: string;
  title: string;
  description: string;
  detailedInfo?: DetailItem[];
}

const { number, title, description, detailedInfo = [] } = Astro.props;
const uniqueId = `card-${number.toLowerCase().replace(/\s+/g, '-')}`;
---

<div class="service-card-container">
  <input type="checkbox" id={uniqueId} name="service-card-group" class="service-card-checkbox hidden" />
  
  <div class="service-card bg-gray-900 rounded-lg overflow-hidden border-l-4 border-transparent hover:border-l-emerald-400 transition-all duration-300 hover:-translate-y-2 hover:shadow-xl">
    <!-- Cabecera de la tarjeta (siempre visible) -->
    <label for={uniqueId} class="service-card-header p-6 flex justify-between items-start cursor-pointer">
      <div class="flex-1">
        <div class="font-mono text-2xl font-bold text-emerald-400 opacity-80 mb-3">{number}</div>
        <h3 class="text-xl font-bold mb-2">{title}</h3>
        <p class="text-gray-400">{description}</p>
      </div>
      
      <div class="ml-4">
        <div class="service-card-icon flex items-center justify-center w-12 h-12 rounded-full bg-emerald-400 hover:bg-emerald-500 transition-all duration-300">
          <svg class="w-5 h-5 text-black transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </div>
      </div>
    </label>
    
    <!-- Contenido expandible (oculto por defecto) -->
    {detailedInfo.length > 0 && (
      <div class="service-card-content bg-gray-800 max-h-0 overflow-hidden transition-all duration-300">
        <div class="p-6 border-l-2 border-emerald-400 mx-6 my-4">
          {detailedInfo.map((info) => (
            <div class="mb-4 last:mb-0">
              <h4 class="text-lg font-bold mb-2">{info.title}</h4>
              <p class="text-gray-400">{info.text}</p>
            </div>
          ))}
        </div>
      </div>
    )}
  </div>
</div>

<script>
  // Script mínimo para cerrar otras tarjetas cuando se abre una nueva
document.addEventListener('DOMContentLoaded', function() {
  const checkboxes = document.querySelectorAll<HTMLInputElement>('.service-card-checkbox');
  
  checkboxes.forEach(function(checkbox) {
    checkbox.addEventListener('change', function(this: HTMLInputElement) {
      // Solo si este checkbox se acaba de marcar (no cuando se desmarca)
      if (this.checked) {
        // Desmarcar todos los demás checkboxes
        checkboxes.forEach(function(otherCheckbox) {
          if (otherCheckbox !== checkbox) {
            otherCheckbox.checked = false;
          }
        });
      }
    });
  });
});

// También ejecutar cuando Astro navega entre páginas
document.addEventListener('astro:page-load', function() {
  const checkboxes = document.querySelectorAll<HTMLInputElement>('.service-card-checkbox');
  
  checkboxes.forEach(function(checkbox) {
    checkbox.addEventListener('change', function(this: HTMLInputElement) {
      if (this.checked) {
        checkboxes.forEach(function(otherCheckbox) {
          if (otherCheckbox !== checkbox) {
            otherCheckbox.checked = false;
          }
        });
      }
    });
  });
});
</script>

<style>
  /* Ocultar el checkbox pero mantenerlo funcional */
  .hidden {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }
  
  /* Estilos para la tarjeta expandida (cuando el checkbox está seleccionado) */
  .service-card-checkbox:checked + .service-card {
    transform: none !important;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }
  
  /* Cuando está expandida, desactivar hover */
  .service-card-checkbox:checked + .service-card:hover {
    transform: none !important;
    border-left-color: transparent !important;
  }
  
  /* Rotar el icono cuando está expandido */
  .service-card-checkbox:checked + .service-card .service-card-icon svg {
    transform: rotate(90deg);
  }
  
  /* Expandir el contenido cuando está seleccionado */
  .service-card-checkbox:checked + .service-card .service-card-content {
    max-height: 500px; /* Valor suficientemente alto para cubrir el contenido */
  }
  
  /* Animación suave para la expansión/contracción */
  .service-card-content {
    transition: max-height 0.5s ease-in-out;
  }
</style>
